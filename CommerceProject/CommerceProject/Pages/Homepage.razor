@page "/home"

@using CommerceProject.Data
@using CommerceProject.Services
@using Microsoft.AspNetCore.Identity.UI.Services;
@using Microsoft.AspNetCore.Http
@using DataAccessLibrary
@using DataAccessLibrary.Models

@inject GetTransactionData TransactionData
@inject IEmailSender _emailSender
@inject IHttpContextAccessor httpContextAccessor
@inject INotificationListData _NotificationList
@inject ITableChangeBroadcastService BalanceService
@inject ITransactionData trans
@implements IDisposable


<style>
    body {
        background-image: url("/css/images/bgh.png"), url("/css/images/uprightcv.png");
        background-repeat: no-repeat;
        background-position: left bottom, right top;
        min-height: 500px;
        background-attachment: fixed;
    }

    .spreadsheet_button{

    }
</style>

@*<h4>Welcome @UserName !</h4>*@

<div class="row mt-3">
    <div class="col-sm-8">
        <div class="container mt-1 bg-light float-left" style="border:1px solid #cecece">
            <h2>
                Notifications
            </h2>
            <div>
                <div class="float-child">
                    <p>Select Start Range</p>
                    <DateEdit TValue="DateTime?" @bind-Date="@selectedStartDate" />
                </div>
                <div class="float-child">
                    <p>Select End Range</p>
                    <DateEdit Min=@selectedStartDate TValue="DateTime?" @bind-Date="@selectedEndDate" />
                </div>
            </div>
            @if (notifications is null)@* if (people is null)*@
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Time</th>
                            <th>Notification Type</th>
                            <th>Message</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in notifications)
                        {
                            <tr>
                                <td>@row.Date.ToString("MM/dd/yyyy")</td>
                                <td>@row.Date.ToString("h:mm tt")</td>
                                <td>@getNotificationType(row)</td>
                                <td>@row.Message</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            <button type="button" name="spreadsheet_button" @onclick="savespreadsheet">Export to spreadsheet</button>
        </div>
    </div>
    <div class="col-sm-4">
        <div class="container bg-light sticky-top mt-1" style="border:1px solid #cecece">
            <h2> Graph </h2>
            <Button Clicked="@(async () => await MonthHandleRedraw())">Current Month</Button>
            <Button Clicked="@(async () => await YearHandleRedraw())">Current Year</Button>
            <div class="card mb-3" style="border:1px solid #cecece">
                <LineChart @ref="lineChart" TItem="decimal" />
            </div>
        </div>
    </div>
</div>

@code{
    LineChart<decimal> lineChart;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await MonthHandleRedraw();
        }
    }

    async Task MonthHandleRedraw()
    {
        await lineChart.Clear();

        await lineChart.AddLabelsDatasetsAndUpdate(getDayLabels(), GetLineChartDataset("month"));
    }

    async Task YearHandleRedraw()
    {
        await lineChart.Clear();

        await lineChart.AddLabelsDatasetsAndUpdate(getMonthLabels(), GetLineChartDataset("year"));
    }

    LineChartDataset<decimal> GetLineChartDataset(string param)
    {
        List<decimal> data = new List<decimal>();
        string label = "";
        int point_radius = 0;

        switch (param)
        {
            case "month":
                label = "Daily Balance";
                data = DailyBalanceData();
                point_radius = 2;
                break;
            case "year":
                label = "Monthly Balance";
                data = MonthlyBalanceData();
                point_radius = 5;
                break;
        }

        return new LineChartDataset<decimal>
        {
            Label = label,
            Data = data,
            BackgroundColor = new List<string> { ChartColor.FromRgba(79, 168, 0, 0.8f) },
            PointBackgroundColor = getPointBackgroundColors(),
            PointBorderColor = getPointBorderColors(),
            Fill = true,
            PointRadius = point_radius,
            BorderDash = new List<int> { }
        };
    }

    List<string> getPointBackgroundColors()
    {
        List<string> pointBackgroundColors = new List<string>();

        for (int i = 0; i < 31; i++)
        {
            pointBackgroundColors.Add(ChartColor.FromRgba(79, 168, 0, 0.8f));
        }

        return pointBackgroundColors;
    }

    List<string> getPointBorderColors()
    {
        List<string> pointBorderColors = new List<string>();

        for (int i = 0; i < 31; i++)
        {
            pointBorderColors.Add(ChartColor.FromRgba(0, 103, 71, 0.8f));
        }

        return pointBorderColors;
    }

    string[] getDayLabels()
    {
        var curr_day = DateTime.Now.Day;
        List<string> dayLabels = new List<string>();

        for (int i = 1; i <= curr_day; i++)
        {
            dayLabels.Add(i.ToString());
        }

        return dayLabels.ToArray();
    }

    string[] getMonthLabels()
    {
        string[] months = { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
        var curr_month = DateTime.Now.Month;
        List<string> monthLabels = new List<string>();

        for (int i = 1; i <= curr_month; i++)
        {
            monthLabels.Add(months[i - 1]);
        }

        return monthLabels.ToArray();
    }

    List<decimal> MonthlyBalanceData()
    {
        // get dict that contains the avg balance per month of current year
        Dictionary<int, decimal> avg_monthly_balances = new Dictionary<int, decimal>(TransactionData.GetMonthlyBalancesPastYear());

        List<decimal> visual_balances = new List<decimal>();

        for (int i = 0; i < DateTime.Now.Month; i++)
        {
            if (avg_monthly_balances.ContainsKey(i))
            {
                visual_balances.Add(Decimal.Round(avg_monthly_balances[i], 2));
            }
            else
            {
                visual_balances.Add(Decimal.Round(0, 2));
            }
        }

        return visual_balances;
    }

    List<decimal> DailyBalanceData()
    {
        // get dict that contains the avg balance per month of current year
        Dictionary<int, decimal> avg_daily_balances = new Dictionary<int, decimal>(TransactionData.GetDailyBalancesPastMonth(DateTime.Now.Month));

        List<decimal> visual_balances = new List<decimal>();

        for (int i = 0; i < 31; i++)
        {
            if (avg_daily_balances.ContainsKey(i))
            {
                visual_balances.Add(Decimal.Round(avg_daily_balances[i], 2));
            }
            else
            {
                visual_balances.Add(Decimal.Round(0, 2));
            }
        }

        return visual_balances;
    }


    public string user_email;

    protected override void OnInitialized()
    {
        user_email = httpContextAccessor.HttpContext.User.Identity.Name; // gets current user's email

        // Getting current balance of database to be compared to future values
        this.BalanceService.OnBalanceChanged += this.BalanceChanged;
    }


    // Event handler to send notification email
    public void BalanceChanged(object sender, BalanceChangeEventArgs args)
    {
        if (args.NewValue.Balance < 25.00)
        {
            string subject = "Low Balance Alert";
            string message = "Your bank balance is less than $25.00.";

            SendEmail(subject, message);
        }

    }

    public async void SendEmail(string subject, string message)
    {
        //send notification email
        await _emailSender.SendEmailAsync(
        user_email,
        subject,
        message);
    }

    public void Dispose()
    {
        this.BalanceService.OnBalanceChanged += this.BalanceChanged;
    }


    private List<NotificationListModel> notifications;
    public string UserName;

    //populate notifications
    protected override async Task OnInitializedAsync()
    {
        UserName = httpContextAccessor.HttpContext.User.Identity.Name; // gets current user's email

        notifications = await _NotificationList.GetNotifications(UserName); // get current user's unread notifs
    }

    public string getNotificationType(NotificationListModel notification)
    {
        string not_type = "";

        switch (notification.Notification_Type)
        {
            case 1:
                not_type = "Timeframe Alert";
                break;
            case 2:
                not_type = "Transaction Alert";
                break;
            case 3:
                not_type = "Low Balance Alert";
                break;
            case 4:
                not_type = "Overdraft Alert";
                break;
        }

        return not_type;
    }

    DateTime? selectedStartDate;
    DateTime? selectedEndDate;

    public async void savespreadsheet()
    {
        String UserName = httpContextAccessor.HttpContext.User.Identity.Name;
        List<TransactionModel> translist = await trans.GetTransactions(UserName);
        ExportToSpreadsheet.create_csv(translist);
    }

}

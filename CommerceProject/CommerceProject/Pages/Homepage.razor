@page "/home"

@using CommerceProject.Data
@using CommerceProject.Services
@using Microsoft.AspNetCore.Identity.UI.Services;
@using Microsoft.AspNetCore.Http
@using DataAccessLibrary
@using DataAccessLibrary.Models

@inject GetTransactionData TransactionData
@inject IEmailSender _emailSender
@inject IHttpContextAccessor httpContextAccessor
@inject INotificationListData _NotificationList
@inject ITransactionData trans
@inject IToastService _toastService


<style>
    body {
        background-image: url("/css/images/bgh.png"), url("/css/images/uprightcv.png");
        background-repeat: no-repeat;
        background-position: left bottom, right top;
        min-height: 500px;
        background-attachment: fixed;
    }
</style>

<h4>Welcome, @UserName!</h4>

<div class="row mt-3">
    <div class="col-sm-8">
        <div class="container mt-1 bg-light float-left" style="border:1px solid #cecece">
            <h2 class="mt-2">
                Notifications
                <button class="btn btn-info float-right mt-1" type="button" name="spreadsheet_button" @onclick="savespreadsheet">Export to spreadsheet</button>     @*HERE*@
            </h2>
            <h6 onclick=@FilterNotificationsByDate()></h6>
            <div>
                <div class="float-child">
                    <p>Select Start Range</p>
                    <DateEdit TValue="DateTime?" @bind-Date="@selectedStartDate" />
                </div>
                <div class="float-child">
                    <p>Select End Range</p>
                    <DateEdit Min=@selectedStartDate TValue="DateTime?" @bind-Date="@selectedEndDate" />
                </div>
            </div>

            @if (notifications is null)@* if (people is null)*@
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table table-striped bg-white">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Time</th>
                            <th>Notification Type</th>
                            <th>Message</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in notifications)
                        {
                            <tr>
                                <td>@row.Date.ToString("M/d/yyyy")</td>
                                <td>@row.Date.ToString("h:mm tt")</td>
                                <td>@getNotificationType(row)</td>
                                <td>@row.Message</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
    <div class="col-sm-4">
        <div class="container bg-light mt-1 mb-4 sticky-first" style="border:1px solid #cecece">
            <h3 class="mt-2"> Notification Summary </h3>
            <NotificationGraph UserEmail="@UserName"></NotificationGraph>
        </div>
        <div class="container bg-light mt-1 sticky-second" style="border:1px solid #cecece">
            <h3 class="mt-2"> Account Balance </h3>
            <BalanceGraph UserEmail="@UserName"></BalanceGraph>
        </div>
    </div>
</div>

@code{
    public string user_email;

    protected override void OnInitialized()
    {
        user_email = httpContextAccessor.HttpContext.User.Identity.Name; // gets current user's email
    }


    private List<NotificationListModel> notifications;
    public string UserName;

    //populate notifications
    protected override async Task OnInitializedAsync()
    {
        UserName = httpContextAccessor.HttpContext.User.Identity.Name; // gets current user's email

        notifications = await _NotificationList.GetNotifications(UserName); // get current user's unread notifs
    }

    public string getNotificationType(NotificationListModel notification)
    {
        string not_type = "";

        switch (notification.Notification_Type)
        {
            case 1:
                not_type = "Timeframe Alert";
                break;
            case 2:
                not_type = "Transaction Alert";
                break;
            case 3:
                not_type = "Low Balance Alert";
                break;
            case 4:
                not_type = "Overdraft Alert";
                break;
        }

        return not_type;
    }

    DateTime? selectedStartDate;
    DateTime? selectedEndDate;


    public async Task FilterNotificationsByDate()
    {
        DateTime start = selectedStartDate ?? DateTime.Parse("Jan 1, 20015");
        DateTime end = selectedEndDate ?? DateTime.Now;

        notifications = await _NotificationList.GetNotificationsByDates(UserName, start.ToString("yyyy-MM-dd"), end.ToString("yyyy-MM-dd"));

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }


    public async void savespreadsheet()
    {
        String UserName = httpContextAccessor.HttpContext.User.Identity.Name;
        List<TransactionModel> translist = await trans.GetTransactions(UserName);
        ExportToSpreadsheet.create_csv(translist);
        _toastService.ShowSuccess("Transactions .CSV file downloaded to \"Desktop\"");
    }

}

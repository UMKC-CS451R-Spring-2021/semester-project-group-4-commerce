@page "/addTrans"

@using CommerceProject.Models
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using Microsoft.AspNetCore.Http
@using CommerceProject.Services
@using Microsoft.AspNetCore.Identity.UI.Services

@inject IPeopleData _db
@inject IHttpContextAccessor httpContextAccessor
@inject ITransactionData _trans
@inject IEmailSender emailsender

<h4>Current User: @UserName</h4>

<h5>Insert new transaction</h5>
<EditForm Model="@newTransaction" OnValidSubmit="@InsertTrans">
    <DataAnnotationsValidator />
    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />         @*conflicting tags, specify which component to use*@

    <InputNumber id="Amount"    @bind-Value="newTransaction.Amount" />
    <InputSelect id="Type"      @bind-Value="newTransaction.Type">
        <option value="@depositValue">Deposit</option>                     @*to use strings for option values, make private variables in the code section*@
        <option value="@withdrawalValue">Withdrawal</option>
    </InputSelect>
    <InputText id="Description" @bind-Value="newTransaction.Description" />
    <InputText id="Location"    @bind-Value="newTransaction.Location" />

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@if (trans is null)     @* if (people is null)*@
    {
        <p><em>Loading...</em></p>
    }
else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Account Number</th>
                    <th>Processing Date</th>
                    <th>Type</th>
                    <th>Amount</th>
                    <th>Description</th>
                    <th>Balance</th>
                    <th>Location</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var row in trans)
                {
                <tr>
                    <td>@row.Account_Num</td>
                    <td>@row.Processing_Date</td>
                    <td>@row.Type</td>
                    <td>@row.Amount</td>
                    <td>@row.Description</td>
                    <td>@row.Balance</td>
                    <td>@row.Location</td>
                </tr>
                }
            </tbody>
        </table>
    }


@code {
    private List<PersonModel> people;
    private List<TransactionModel> trans;
    private DisplayTransactionModel newTransaction = new DisplayTransactionModel();
    private string depositValue = "CR";
    private string withdrawalValue = "DR";
    public string UserName;
    private send_email_notification sendemail;


    protected override async Task OnInitializedAsync()
    {
        UserName = httpContextAccessor.HttpContext.User.Identity.Name; // gets current user's email

        //people = await _db.GetPeople();

        trans = await _trans.GetTransactions(UserName);

    }

    private async Task InsertTrans()
    {
        DateTime now = DateTime.Now;
        int accNum = trans[0].Account_Num;


        TransactionModel t = new TransactionModel
        {
            Account_Num = accNum,                   // 10010111 for trant@mail.com
            Processing_Date = now.ToString(),
            Type = chooseType(),
            Amount = roundAmount(),
            Description = newTransaction.Description,
            Balance = newBalance(),
            Location = newTransaction.Location
        };

        await _trans.InsertTransaction(t);              // add to database
        sendemail = new send_email_notification(emailsender, trans, UserName);
        sendemail.email_notification();
        trans.Add(t);                                   // add to list without refreshing page
        newTransaction = new DisplayTransactionModel();     // wipe out form model
    }

    private float roundAmount()
    {
        double rounded = Math.Round(newTransaction.Amount, 2);
        return (float)rounded;
    }

    private float newBalance()
    {
        TransactionModel t = trans.Last();


        double rounded = Math.Round(newTransaction.Amount, 2);
        return (float)(t.Balance + rounded);
    }

    private string chooseType()
    {


        if (newTransaction.Type == "DR")
        {
            newTransaction.Amount *= -1;
            return "DR";
        }
        else
        {
            return "CR";
        }
    }

}

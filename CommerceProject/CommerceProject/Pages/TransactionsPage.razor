@page "/transactions"

@using CommerceProject.Models
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using Microsoft.AspNetCore.Http

@inject IPeopleData _db
@inject IHttpContextAccessor httpContextAccessor
@inject ITransactionData _trans
@inject IToastService toastService

<style>
    body {
        background-image: url("/css/images/bgh.png"), url("/css/images/uprightcv.png");
        background-repeat: no-repeat;
        background-position: left bottom, right top;
        min-height: 500px;
        background-attachment: fixed;
    }
</style>


@if (trans is null)@* if (people is null)*@
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container mt-3 bg-light" style="border:1px solid #cecece">

        <p class="h2 mt-2 mb-2">
            Transactions
            <button type="button" class="btn btn-info float-right mr-1 btn-info add-new" data-toggle="modal" data-target="#myModal"> <i class="fa fa-plus"></i> Add Transaction </button>
        </p>
        <div id="myModal" class="modal fade" role="dialog">
            <div class="modal-dialog modal-dialog-centered">

                @*<--Modal content-->*@
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Add New Transaction</h4>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>

                    <div class="modal-body">
                        <div class="form">
                            <EditForm Model="@newTransaction" OnValidSubmit="@InsertTrans">
                                <DataAnnotationsValidator />
                                <Microsoft.AspNetCore.Components.Forms.ValidationSummary />         @*conflicting tags, specify which component to use*@

                                <div class="form-group">
                                    <label for="Amount" class="col-form-label">Amount:</label>
                                    <div>
                                        <InputNumber id="Amount" @bind-Value="newTransaction.Amount" />
                                        <InputSelect id="Type" @bind-Value="newTransaction.Type">
                                            <option value="@depositValue">Deposit</option>                   @*to use strings for option values, make private variables in the code section*@
                                            <option value="@withdrawalValue">Withdrawal</option>
                                        </InputSelect>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="Description" class="col-form-label">Description:</label>
                                    <div>
                                        <InputText id="Description" @bind-Value="newTransaction.Description" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="Location" class="col-form-label">Location:</label>
                                    <div>
                                        <InputText id="Location" @bind-Value="newTransaction.Location" />
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="submit" class="btn btn-info add-new">Submit</button>
                                </div>
                            </EditForm>
                        </div>

                    </div>
                </div>
            </div>
        </div>

        @*<--Table content-->*@
        <div class="table-responsive-sm">
            <table class="table tableRowHover bg-white" style="border-collapse:collapse;">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Description</th>
                        <th class="alnright">Amount</th>
                        <th class="alnright">Balance</th>
                    </tr>
                </thead>
                <tbody>
                    @{int i = 0;}
                    @foreach (var row in trans)

                    {
                    <tr data-toggle="collapse" data-target=".data_@i">
                        <td>@row.Processing_Date.ToString("M/d/yyyy")</td>
                        <td>@row.Processing_Date.ToString("h:mm tt")</td>
                        <td>@row.Description</td>
                        <td class="alnright">$@row.Amount</td>
                        <td class="alnright">$@(row.Balance)</td>

                    </tr>
                        <tr class="tableRowHoverOff noBorder">
                            <td class="hiddenRow ">
                                <div class="collapse data_@i">
                                    <p><strong>Account # : </strong>@(row.Account_Num)</p>
                                    <p><strong>Type : </strong>@getType(row.Type)</p>
                                    <p><strong>Location : </strong>@(row.Location)</p>
                                </div>
                            </td>
                        </tr>
                        i++;

                    }
                </tbody>
            </table>
        </div>
    </div>
}
    }


@code {
    private List<PersonModel> people;
    private List<TransactionModel> trans;
    private List<TransactionModel> accountInfo;
    private DisplayTransactionModel newTransaction = new DisplayTransactionModel();
    private string depositValue = "CR";
    private string withdrawalValue = "DR";

    public string UserName;

    protected override async Task OnInitializedAsync()
    {
        UserName = httpContextAccessor.HttpContext.User.Identity.Name; // gets current user's email

        //people = await _db.GetPeople();

        trans = await _trans.GetTransactions(UserName);
        accountInfo = await _trans.GetAccountNum(UserName);
    }

    private async Task InsertTrans()
    {
        DateTime now = DateTime.Now;
        int accNum = accountInfo[0].Account_Num;


        TransactionModel t = new TransactionModel
        {
            Account_Num = accNum,                   // 10010111 for trant@mail.com
            Processing_Date = now,
            Type = chooseType(),
            Amount = roundAmount(),
            Description = newTransaction.Description,
            Balance = newBalance(),
            Location = newTransaction.Location
        };

        await _trans.InsertTransaction(t);              // add to database

        trans.Add(t);                                   // add to list without refreshing page
        newTransaction = new DisplayTransactionModel();     // wipe out form model
    }

    private decimal roundAmount()
    {
        decimal rounded = Math.Round(newTransaction.Amount, 2);
        return rounded;
    }

    private decimal newBalance()              // need to get balance from account? dont include in transaction? set to account
    {
        TransactionModel t = accountInfo[0];


        decimal rounded = Math.Round(newTransaction.Amount, 2);
        return (t.Balance + rounded);
    }

    private string chooseType()
    {


        if (newTransaction.Type == "DR")
        {
            newTransaction.Amount *= -1;
            return "DR";
        }
        else
        {
            return "CR";
        }
    }

    private string getType(string type)
    {
        if (type == "CR")
        {
            return "Credit";
        }
        else
        {
            return "Draft";
        }
    }

}

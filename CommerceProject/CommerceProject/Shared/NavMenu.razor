@using CommerceProject.Services
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity.UI.Services;

@inject TriggeredNotificationBroadcastService NotificationService
@inject INotificationListData _NotificationList
@inject IHttpContextAccessor httpContextAccessor
@inject IEmailSender _emailSender


<nav class="navbar navbar-expand-lg navbar-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            <img src="/css/images/commerce-bank-vector-logo-horizontal.png" />
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                </li>

                <li class="nav-item">
                    <a class="nav-link" href="/transactions">Transactions</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link" href="/settings">Settings</a>
                </li>
                @if (unreadNotifications is null)
                {
                    <a class="nav-link" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fas fa-bell"></i> </a>
                }
                else
                {
                    @* NAVBAR NOTIFICATIO DROPDOWN MENU *@
                    <li class="nav-item-notif dropdown mr-3">
                        @if (num_unread_notifs == 0)
                        {
                            <a class="nav-link" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fas fa-bell"></i></a>
                        }
                        else
                        {
                            <a class="nav-link" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fas fa-bell"></i><span class="badge rounded-pill badge-notification bg-danger">@num_unread_notifs</span></a>
                        }
                        <ul class="dropdown-menu">
                            <li class="head text-white">
                                <div class="row">
                                    <div class="col-lg-12 col-sm-12 col-12">
                                        <span>Notifications (@num_unread_notifs)</span>
                                        <a href="/home" class="float-right text-white">View all <i class="fas fa-search"></i></a>
                                    </div>
                                </div>
                            </li>
                            @foreach (var row in unreadNotifications)
                            {
                                <li class="notification-box">
                                    <div class="row">
                                        <div class="col-lg-1 col-sm-1 col-1 text-center">
                                        </div>
                                        <div class="col-lg-10 col-sm-10 col-10">
                                            <strong class="text-info">@getNotificationType(row)</strong>
                                            <div>
                                                @row.Message
                                            </div>
                                            <small class="text">@row.Date.ToString("MM/dd/yyyy"), @row.Date.ToString("h:mm tt")</small>
                                        </div>
                                    </div>
                                    <div class="dropdown-divider" style="border-color:grey;"></div>
                                </li>
                            }
                            <li class="footer bg-dark text-center">
                                <button class="btn btn-block bg-transparent text-white" @onclick="clearNewNotifications"  >Clear</button>
                            </li>
                        </ul>
                    </li>
                }
            </ul>
            <form method="post" action="Identity/Account/LogOut">
                <button type="submit" class="submit nav-link btn btn-link">Sign out</button>
            </form>
        </div>
    </div>
</nav>

@code {
    private List<NotificationListModel> unreadNotifications;
    private List<NotificationParamsModel> notificationSettings;
    public string UserName;
    public int num_unread_notifs;


    protected override void OnInitialized()
    {
        this.NotificationService.OnTriggeredNotification += this.TriggeredNotification;  //prepare to listen for new notifications

    }


    //populate bell notifications
    protected override async Task OnInitializedAsync()
    {

        UserName = httpContextAccessor.HttpContext.User.Identity.Name; // gets current user's email

        unreadNotifications = await _NotificationList.GetNotificationsUnread(UserName); // get current user's unread notifs

        num_unread_notifs = unreadNotifications.Count;
    }


    public async void TriggeredNotification(NotificationListModel triggeredNotification)
    {
        unreadNotifications = await _NotificationList.GetNotificationsUnread(UserName); // get current user's unread notifs

        num_unread_notifs = unreadNotifications.Count;

        notificationSettings = await _NotificationList.GetNotificationSettings(UserName);

        if (notificationSettings[0].Send_Email)
        {
            SendEmail(getNotificationType(triggeredNotification), triggeredNotification.Message);
        }

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }


    public async void SendEmail(string subject, string message)
    {
        //send notification email
        await _emailSender.SendEmailAsync(
        UserName,
        subject,
        message);
    }


    public string getNotificationType(NotificationListModel notification)
    {
        string not_type = "";

        switch (notification.Notification_Type)
        {
            case 1:
                not_type = "Timeframe Alert";
                break;
            case 2:
                not_type = "Transaction Alert";
                break;
            case 3:
                not_type = "Low Balance Alert";
                break;
            case 4:
                not_type = "Overdraft Alert";
                break;
        }

        return not_type;
    }

    public async void clearNewNotifications()
    {
        foreach (NotificationListModel curr_notification in unreadNotifications)
        {
            await _NotificationList.SetReadToTrue(curr_notification.Notification_ID);
        }

        unreadNotifications = await _NotificationList.GetNotificationsUnread(UserName); // get current user's unread notifs

        num_unread_notifs = unreadNotifications.Count;

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }


    public void Dispose()
    {
        this.NotificationService.OnTriggeredNotification -= this.TriggeredNotification;
    }

}